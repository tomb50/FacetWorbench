package FacetWorkbench.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import org.apache.log4j.Level;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.make.script.IConfig;
import java.util.Map;
import jetbrains.mps.make.script.IPropertiesPool;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;

public class something_Facet extends IFacet.Stub {
  private static final Logger LOG = LogManager.getLogger(something_Facet.class);
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("FacetWorkbench.something");
  public something_Facet() {
    ListSequence.fromList(targets).addElement(new Target_something());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen")});
  }
  public Iterable<IFacet.Name> extended() {
    return null;
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new TargetProperties();
  }
  public static class Target_something implements ITargetEx {
    private static final ITarget.Name name = new ITarget.Name("FacetWorkbench.something.something");
    public Target_something() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_uueat9_a0a = null;
          final Iterable<GResource> input = (Iterable<GResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              LoggingRuntime.logMsgView(Level.WARN, "Here after gen before textgen4", something_Facet.class, null, null);
              final Project project = monitor.getSession().getProject();


              for (GResource resource : input) {

                LoggingRuntime.logMsgView(Level.WARN, "input", something_Facet.class, null, null);
                LoggingRuntime.logMsgView(Level.WARN, resource, something_Facet.class, null, null);


                SModel m = resource.model();
                final SModel outputModel = resource.status().getOutputModel();

                LoggingRuntime.logMsgView(Level.WARN, "output", something_Facet.class, null, null);
                LoggingRuntime.logMsgView(Level.WARN, SModelOperations.getModelName(outputModel), something_Facet.class, null, null);

                // This errors and not able to mutate the input model
                // 






                project.getModelAccess().runWriteAction(new Runnable() {
                  public void run() {
                    ListSequence.fromList(SModelOperations.nodes(outputModel, CONCEPTS.ClassConcept$bK)).visitAll(new IVisitor<SNode>() {
                      public void visit(SNode it) {
                        LoggingRuntime.logMsgView(Level.WARN, "concept " + SPropertyOperations.getString(it, PROPS.name$MnvL), something_Facet.class, null, null);
                      }
                    });
                    ListSequence.fromList(SModelOperations.nodes(outputModel, CONCEPTS.ClassConcept$bK)).where(new IWhereFilter<SNode>() {
                      public boolean accept(SNode it) {
                        return SPropertyOperations.getString(it, PROPS.name$MnvL).equals("Apple");
                      }
                    }).visitAll(new IVisitor<SNode>() {
                      public void visit(SNode it) {
                        LoggingRuntime.logMsgView(Level.WARN, "found one!", something_Facet.class, null, null);
                        SNodeOperations.deleteNode(it);
                      }
                    });
                  }
                });

                _output_uueat9_a0a = Sequence.fromIterable(_output_uueat9_a0a).concat(Sequence.fromIterable(input));
              }
            default:
              progressMonitor.done();
              return new IResult.SUCCESS(_output_uueat9_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.TextGen.configure")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(GResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return null;
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      return t;
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
      } catch (RuntimeException re) {
      }
    }
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept ClassConcept$bK = MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }
}
